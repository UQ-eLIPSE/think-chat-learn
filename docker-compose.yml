version: '3.7'
services:
  client:
    env_file:
      - ./client/.env.development
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: client-app
    volumes:
      - ./client:/var/www/think-chat-learn/client
      - ./common:/var/www/think-chat-learn/common
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - NODE_ENV=development  
    networks:
      - network
    depends_on:
      - server
      - mongodb

  admin:
    env_file:
      - ./admin/.env.development
    build:
      context: ./admin
      dockerfile: Dockerfile
    container_name: admin-app
    volumes:
      - ./admin:/var/www/think-chat-learn/admin
      - ./common:/var/www/think-chat-learn/common
    expose:
      - "4000"
    ports:
      - "4000:4000"
    environment:
      - PORT=4000
      - NODE_ENV=development  
    networks:
      - network
    depends_on:
      - server
      - mongodb
  # intermediate:
  #   env_file:
  #     - ./intermediate/.env.development
  #   build:
  #     context: ./intermediate
  #     dockerfile: Dockerfile
  #   container_name: intermediate-app
  #   volumes:
  #     - ./intermediate:/var/www/think-chat-learn/intermediate
  #     - ./common:/var/www/think-chat-learn/common
  #   expose:
  #     - "5000"
  #   ports:
  #     - "5000:5000"
  #   environment:
  #     - PORT=5000
  #     - NODE_ENV=development    
  #   networks:
  #     - network
  #   depends_on:
  #     - server
  #     - mongodb


      # - volsync_intermediate

  server:
    build:
      context: ./server
    container_name: server-app
    volumes:
      - ./server:/var/www/think-chat-learn/server
      - ./common:/var/www/think-chat-learn/common
    expose:
      - "8080"
    ports:
      - "8080:8080"
    networks:
      - network
  
  mongodb:
    image: mongo:latest
    container_name: mongo-db
    # volumes:
    #   - ./mongodb:/data/db
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/dev/null
    ports:
      - '27000:27017'
    networks:
      - network
    logging:
      driver: none 


#Docker Networks
networks:
  network:
    driver: bridge

#Volumes
volumes:
  dbdata:
    driver: local